{"version":3,"sources":["component/Box.js","component/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Box","React","memo","props","details","active","gridNo","handlePlayerClick","player","useState","color","setColor","useEffect","id","style","width","document","getElementById","offsetWidth","height","backgroundColor","border","borderRadius","display","float","marginLeft","marginRight","marginBottom","onClick","tempArr","slice","length","Layout","grid","setGrid","n","setN","y","setY","z","setZ","setplayer","comp","setComp","open","setOpen","setActive","alert","setAlert","plArr","indexOf","console","log","Alert","severity","Dialog","aria-labelledby","DialogTitle","DialogContent","TextField","error","required","type","label","placeholder","helperText","onChange","e","currentTarget","value","DialogActions","Button","disabled","winArr","i","push","setTimeout","startTimer","arr","random","Math","floor","tempComp","Grid","container","xs","map","g","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.27dbff49.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\n\nconst Box = React.memo(props => {\n\n    const { details, active, gridNo, handlePlayerClick, player } = props;\n    const [color, setColor] = useState(details.color);\n\n    const handleClick = () => {\n        let tempArr = [\n            ...player.slice(0, details.id),\n            \"F\",\n            ...player.slice(details.id + 1, player.length + 1)\n        ];\n        handlePlayerClick(tempArr)\n        setColor(false);\n    }\n\n    useEffect(() => {\n        if (active === details.id)\n            setColor(true)\n    }, [active])\n\n\n\n\n    return (\n        <Fragment>\n            <div style={{ width: document.getElementById(\"container\").offsetWidth / gridNo - 15, height: 100, backgroundColor: color ? \"lightblue\" : \"lightgrey\", border: \"1px solid black\", borderRadius: 5, display: \"inline-block\", float: \"left\", marginLeft: \"auto\", marginRight: \"auto\", marginBottom: 4 }} onClick={handleClick}>\n                In Box\n            </div>\n\n        </Fragment>\n    )\n});\n\nexport default Box;","import React, { Fragment, useState, useEffect } from \"react\";\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    TextField,\n    DialogActions,\n    Button,\n    Grid\n} from \"@material-ui/core\";\n\nimport Alert from '@material-ui/lab/Alert';\n\nimport Box from \"./Box\";\n\nconst Layout = React.memo(props => {\n\n    const [grid, setGrid] = useState([]);\n    const [n, setN] = useState(0);\n    const [y, setY] = useState(0);\n    const [z, setZ] = useState(0);\n    const [player, setplayer] = useState([\"T\"]);\n    const [comp, setComp] = useState([\"F\"]);\n    const [open, setOpen] = useState(false);\n    const [active, setActive] = useState(null);\n    const [alert, setAlert] = useState(\"\")\n\n    const handleClose = () => {\n        setOpen(false)\n    }\n\n    const startTimer = (arr) => {\n\n        let random = Math.floor(Math.random() * ((n * n) - 0))\n\n        let tempComp = [\n            ...arr.slice(0, random),\n            \"T\",\n            ...arr.slice(random + 1, arr.length + 1)\n        ];\n\n        setActive(random);\n        setComp(tempComp);\n        setplayer(tempComp);\n\n        setTimeout(() => startTimer(tempComp), z * 1000);\n    }\n    const handlePlayerClick = (plArr) => {\n        setplayer(plArr);\n        setComp(plArr);\n    }\n\n    const handleBtnClick = () => {\n        let tempArr = [];\n        let winArr = [];\n        for (let i = 0; i < n * n; i++) {\n\n            tempArr = [\n                ...tempArr,\n                {\n                    id: i,\n                    color: i < y ? true : false\n                }\n            ]\n            winArr.push(i < y ? \"T\" : \"F\");\n        }\n        setGrid(tempArr);\n        setplayer(winArr);\n        setComp(winArr);\n        setTimeout(() => startTimer(winArr), z * 1000);\n        handleClose();\n    }\n\n\n    useEffect(() => {\n        setOpen(true);\n    }, [])\n\n    useEffect(() => {\n        if (comp.length > 0 && comp.indexOf(\"F\") === -1) {\n            setAlert(\"Computer\")\n            console.log(\"Comp Wins\");\n        }\n\n    }, [comp])\n\n    useEffect(() => {\n        if (player.length > 0 && player.indexOf(\"T\") === -1) {\n            setAlert(\"Player\")\n            console.log(\"Player Wins\");\n        }\n\n    }, [player])\n\n    return (\n        <Fragment>\n            {\n                alert.length > 0 ?\n                    <Alert severity=\"success\">{alert + \" Wins\"}</Alert>\n                    :\n                    <Fragment>\n                        <Dialog aria-labelledby=\"simple-dialog-title\" open={open}>\n                            <DialogTitle id=\"simple-dialog-title\">Please Provide the following Inputs</DialogTitle>\n                            <DialogContent>\n\n                                <TextField\n                                    error={n < 0 || n > 2000}\n                                    required\n                                    type=\"number\"\n                                    id=\"n\"\n                                    label=\"n\"\n                                    placeholder=\"0\"\n                                    helperText=\"Please enter value between 0 and 2000\"\n                                    onChange={(e) => setN(e.currentTarget.value)}\n                                    style={{ width: \"100%\" }}\n                                />\n                                <TextField\n                                    error={y < 0 || y > (n * n)}\n                                    required\n                                    type=\"number\"\n                                    id=\"y\"\n                                    label=\"y\"\n                                    placeholder=\"0\"\n                                    helperText={\"Please enter value between 0 and \" + n * n}\n                                    onChange={(e) => setY(e.currentTarget.value)}\n                                    style={{ width: \"100%\" }}\n                                />\n                                <TextField\n                                    error={z < 0 || z > 5}\n                                    required\n                                    type=\"number\"\n                                    id=\"z\"\n                                    label=\"z\"\n                                    placeholder=\"0\"\n                                    helperText=\"Please enter value between 0 and 5\"\n                                    onChange={(e) => setZ(e.currentTarget.value)}\n                                    style={{ width: \"100%\" }}\n                                />\n                                <DialogActions>\n                                    <Button disabled={n <= 0 || n > 2000 || y <= 0 || y >= (n * n) || z <= 0 || z > 5} onClick={handleBtnClick}>Submit</Button>\n                                </DialogActions>\n                            </DialogContent>\n                        </Dialog>\n                        <Grid id=\"container\" container xs={12}>\n                            {\n                                grid.length > 0 && grid.map((g, i) => <Box details={g} key={i} active={active} gridNo={n} handlePlayerClick={handlePlayerClick} player={player} />)\n                            }\n                        </Grid>\n                    </Fragment>\n            }\n\n        </Fragment>\n    )\n})\n\nexport default Layout;","import React from 'react';\n\nimport Layout from \"./component/Layout\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}